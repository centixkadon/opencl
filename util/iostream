
#pragma once

#include <memory>

namespace std {

template <typename _ostream, typename _Ty, typename _Alloc = allocator<_Ty>, template <typename, typename> typename _container>
_ostream & operator<<(_ostream & _out, _container<_Ty, _Alloc> rhs) {
  _out << "[";
  if (!rhs.empty()) {
    auto p = rhs.begin();
    _out << " " << *p;
    for (++p; p != rhs.end(); ++p) {
      _out << ", " << *p;
    }
  }
  _out << " ]";
  return _out;
}

template <class _Elem, class _Traits>
inline basic_ostream<_Elem, _Traits> & bold(basic_ostream<_Elem, _Traits> & _Ostr) {
  return _Ostr << "\e[1m";
}

template <class _Elem, class _Traits>
inline basic_ostream<_Elem, _Traits> & red(basic_ostream<_Elem, _Traits> & _Ostr) {
  return _Ostr << "\e[31m";
}

template <class _Elem, class _Traits>
inline basic_ostream<_Elem, _Traits> & reset(basic_ostream<_Elem, _Traits> & _Ostr) {
  return _Ostr << "\e[31m";
}

} // namespace std
